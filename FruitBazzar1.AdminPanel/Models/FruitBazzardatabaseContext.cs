// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FruitBazzar1.AdminPanel.Models
{
    public partial class FruitBazzardatabaseContext : DbContext
    {
        public FruitBazzardatabaseContext()
        {
        }

        public FruitBazzardatabaseContext(DbContextOptions<FruitBazzardatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CartItem> CartItem { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Purchase> Purchase { get; set; }
        public virtual DbSet<Review> Review { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=FruitBazzar.database;Integrated Security=true");

            modelBuilder.Entity<CartItem>(entity =>
            {
                entity.HasIndex(e => e.ProductId, "IX_CartItem_ProductId");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Customers)
                    .WithMany(p => p.CartItem)
                    .HasForeignKey(d => d.CustomersId)
                    .HasConstraintName("FK_CartItem_ToCustomers");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CartItem)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_CartItem_ToProducts");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Orders_ToCustomers");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Orders_ToProducts");
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Categort)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategortId)
                    .HasConstraintName("FK_Products_ToCategory");
            });

            modelBuilder.Entity<Purchase>(entity =>
            {
                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Purchase)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Purchases_ToCustomers");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Purchase)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Purchases_ToProducts");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Review)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Review_ToCustomers");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Review)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Review_ToProducts");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}